rm(list=ls())
library(SnowballC)
if (! ("methods" %in% rownames(installed.packages()))) { install.packages("methods") }
if (! ("statmod" %in% rownames(installed.packages()))) { install.packages("statmod") }
if (! ("stats" %in% rownames(installed.packages()))) { install.packages("stats") }
if (! ("graphics" %in% rownames(installed.packages()))) { install.packages("graphics") }
if (! ("RCurl" %in% rownames(installed.packages()))) { install.packages("RCurl") }
if (! ("jsonlite" %in% rownames(installed.packages()))) { install.packages("jsonlite") }
if (! ("tools" %in% rownames(installed.packages()))) { install.packages("tools") }
if (! ("utils" %in% rownames(installed.packages()))) { install.packages("utils") }
if (! ("SnowballC" %in% rownames(installed.packages()))) { install.packages("SnowballC") }
if (! ("dplyr" %in% rownames(installed.packages()))) { install.packages("dplyr") }
if (! ("ggplot2" %in% rownames(installed.packages()))) { install.packages("ggplot2") }
if (! ("tm" %in% rownames(installed.packages()))) { install.packages("tm") }
if (! ("caret" %in% rownames(installed.packages()))) { install.packages("caret") }
if (! ("rattle" %in% rownames(installed.packages()))) { install.packages("rattle") }
if (! ("pryr" %in% rownames(installed.packages()))) { install.packages("pryr") }
if (! ("statmod" %in% rownames(installed.packages()))) { install.packages("statmod") }
install.packages("statmod")
if (! ("stats" %in% rownames(installed.packages()))) { install.packages("stats") }
if (! ("graphics" %in% rownames(installed.packages()))) { install.packages("graphics") }
if (! ("RCurl" %in% rownames(installed.packages()))) { install.packages("RCurl") }
if (! ("jsonlite" %in% rownames(installed.packages()))) { install.packages("jsonlite") }
if (! ("tools" %in% rownames(installed.packages()))) { install.packages("tools") }
if (! ("utils" %in% rownames(installed.packages()))) { install.packages("utils") }
if (! ("SnowballC" %in% rownames(installed.packages()))) { install.packages("SnowballC") }
if (! ("dplyr" %in% rownames(installed.packages()))) { install.packages("dplyr") }
if (! ("ggplot2" %in% rownames(installed.packages()))) { install.packages("ggplot2") }
if (! ("tm" %in% rownames(installed.packages()))) { install.packages("tm") }
if (! ("caret" %in% rownames(installed.packages()))) { install.packages("caret") }
if (! ("rattle" %in% rownames(installed.packages()))) { install.packages("rattle") }
if (! ("pryr" %in% rownames(installed.packages()))) { install.packages("pryr") }
setwd("~/GitHub/WhatsCooking/Scripts")
t1 <- testdata
data <- fromJSON("data/train.json", flatten = TRUE)
library(jsonlite)
library(SnowballC)
library(dplyr)
library(ggplot2)
library(tm) # For NLP; creating bag-of-words
library(caret)
library(rattle)
data <- fromJSON("data/train.json", flatten = TRUE)
testdata <- fromJSON("data/test.json", flatten = TRUE)
data <- fromJSON("data/train.json", flatten = TRUE)
library(jsonlite)
library(SnowballC)
library(dplyr)
library(ggplot2)
library(tm) # For NLP; creating bag-of-words
library(caret)
library(rattle)
data <- fromJSON("data/train.json", flatten = TRUE)
if (! ("methods" %in% rownames(installed.packages()))) { install.packages("methods") }
data <- fromJSON("data/train.json", flatten = TRUE)
data <- fromJSON("data/train.json", flatten = TRUE)
testdata <- fromJSON("data/test.json", flatten = TRUE)
data <- fromJSON("data/train.json", flatten = TRUE)
if (! ("RCurl" %in% rownames(installed.packages()))) { install.packages("RCurl") }
data <- fromJSON("data/train.json", flatten = TRUE)
setwd("~/GitHub/WhatsCooking/Scripts")
data <- fromJSON("../data/train.json", flatten = TRUE)
testdata <- fromJSON("../data/test.json", flatten = TRUE)
t1 <- testdata
t1[,"cuisine"] <- NA # this puts a dummy cuisine column
fulldata <- as.data.frame(rbind(data,t1))
ingredients <- Corpus(VectorSource(fulldata$ingredients))
ingredients <- tm_map(ingredients, stemDocument)
ingredientsDTM <- DocumentTermMatrix(ingredients)
sparse <- removeSparseTerms(ingredientsDTM, 0.99)
ingredientsDTM <- as.data.frame(as.matrix(sparse))
ingredientsDTM$cuisine <- as.factor(fulldata$cuisine)
targetvar <- "cuisine"
targetval <- "Italian"
ntrain<- NROW(data)
ntest <- NROW(testdata)
nfull <- ntrain + ntest
test <- as.data.frame(ingredientsDTM[(ntrain+1):nfull,] )
data <- as.data.frame(ingredientsDTM[1:ntrain,])
dataT<-data
save(dataT, test, file = "../data/saveWC.RData")
setwd("~/GitHub/WhatsCooking/Scripts")
load(file="../data/saveWC.RData")
rm(list=ls())
library(SnowballC)
library(jsonlite)
library(dplyr)
library(ggplot2)
library(tm) # For NLP; creating bag-of-words
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
library(rattle)
install.packages("randomForest")
install.packages("rpart.plot")
library(SnowballC)
library(jsonlite)
library(dplyr)
library(ggplot2)
library(tm) # For NLP; creating bag-of-words
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
library(rattle)
library(RColorBrewer)
setwd("~/GitHub/WhatsCooking/Scripts")
load(file="../data/saveWC.RData")
seed <- 2097865
ntrials <- 1
splitprob <- 2/3
accuracy <- vector(mode = "numeric",length = ntrials+1)
for (trial in 1:ntrials)
{
writeLines(paste("Trial number: ",trial,"..."))
# Form a random partition
train.index <- createDataPartition(y = dataT$cuisine, p = splitprob, list = FALSE)
train <- dataT[ train.index,]
test  <- dataT[-train.index,]
# Set up Formula
xpart <- " . "
ypart <- paste(targetvar," ~ ")
Formula <- as.formula(paste(ypart,xpart))
##Form a DT
fit <- rpart(Formula, data = train, method = "class",
control=rpart.control(minsplit=2,cp=0.0001))
##Predict the test using the model
rpartpredict<- predict(fit,test,"class") ## Accuracy 60%
rpartcm <-confusionMatrix(rpartpredict, test$cuisine)
accuracy[trial]<-rpartcm$overall[[1]]
}
ma <- as.matrix(accuracy)
ma1 <- apply(ma, 2, quantile, probs = c(0.1, 0.5, 0.9))
mat <- t(ma1)
amin<- mat[1,1]
a <- mat[1,2]
amax <- mat[1,3]
rm(ma1,mat,ma)
writeLines(paste("Accuracy @ 10% Quantile: ",round((amin*100), digits=2), "%"))
writeLines(paste("Accuracy @ 50% Quantile: ",round((a*100), digits=2), "%"))
writeLines(paste("Accuracy @ 90% Quantile: ",round((amax*100), digits=2), "%"))
targetvar="cuisine"
for (trial in 1:ntrials)
{
writeLines(paste("Trial number: ",trial,"..."))
# Form a random partition
train.index <- createDataPartition(y = dataT$cuisine, p = splitprob, list = FALSE)
train <- dataT[ train.index,]
test  <- dataT[-train.index,]
# Set up Formula
xpart <- " . "
ypart <- paste(targetvar," ~ ")
Formula <- as.formula(paste(ypart,xpart))
##Form a DT
fit <- rpart(Formula, data = train, method = "class",
control=rpart.control(minsplit=2,cp=0.0001))
##Predict the test using the model
rpartpredict<- predict(fit,test,"class") ## Accuracy 60%
rpartcm <-confusionMatrix(rpartpredict, test$cuisine)
accuracy[trial]<-rpartcm$overall[[1]]
}
ma <- as.matrix(accuracy)
ma1 <- apply(ma, 2, quantile, probs = c(0.1, 0.5, 0.9))
mat <- t(ma1)
amin<- mat[1,1]
a <- mat[1,2]
amax <- mat[1,3]
rm(ma1,mat,ma)
writeLines(paste("Accuracy @ 10% Quantile: ",round((amin*100), digits=2), "%"))
writeLines(paste("Accuracy @ 50% Quantile: ",round((a*100), digits=2), "%"))
writeLines(paste("Accuracy @ 90% Quantile: ",round((amax*100), digits=2), "%"))
install.packages("e1071")
library(e1071)
train.index <- createDataPartition(y = dataT$cuisine, p = splitprob, list = FALSE)
train <- dataT[ train.index,]
test  <- dataT[-train.index,]
xpart <- " . "
ypart <- paste(targetvar," ~ ")
Formula <- as.formula(paste(ypart,xpart))
fit <- rpart(Formula, data = train, method = "class",
control=rpart.control(minsplit=2,cp=0.0001))
rpartpredict<- predict(fit,test,"class") ## Accuracy 60%
rpartcm <-confusionMatrix(rpartpredict, test$cuisine)
accuracy[trial]<-rpartcm$overall[[1]]
ma <- as.matrix(accuracy)
ma1 <- apply(ma, 2, quantile, probs = c(0.1, 0.5, 0.9))
mat <- t(ma1)
amin<- mat[1,1]
a <- mat[1,2]
amax <- mat[1,3]
rm(ma1,mat,ma)
writeLines(paste("Accuracy @ 10% Quantile: ",round((amin*100), digits=2), "%"))
writeLines(paste("Accuracy @ 50% Quantile: ",round((a*100), digits=2), "%"))
writeLines(paste("Accuracy @ 90% Quantile: ",round((amax*100), digits=2), "%"))
fit <- rpart(Formula, data = train, method = "class",
control=rpart.control(minsplit=2,cp=0.00001))
##Predict the test using the model
rpartpredict<- predict(fit,test,"class") ## Accuracy 60%
rpartcm <-confusionMatrix(rpartpredict, test$cuisine)
rpartcm$overall[[1]]
fit <- rpart(Formula, data = train, method = "class",
control=rpart.control(minsplit=2,cp=0.1 1e 5))
##Predict the test using the model
rpartpredict<- predict(fit,test,"class") ## Accuracy 60%
rpartcm <-confusionMatrix(rpartpredict, test$cuisine)
